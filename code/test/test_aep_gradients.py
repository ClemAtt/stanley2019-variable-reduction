import numpy as np

# import gaus_gradients
import full_aep
import sys

sys.path.insert(0, "/fslhome/pjstanle/compute/reduction")
from windRoses import *


def sunflower_points(n, alpha=1.0):
    # this function generates n points within a circle in a sunflower seed pattern
    # the code is based on the example found at
    # https://stackoverflow.com/questions/28567166/uniformly-distribute-x-points-inside-a-circle

    def radius(k, n, b):
        if (k + 1) > n - b:
            r = 1.0  # put on the boundary
        else:
            r = np.sqrt((k + 1.0) - 1.0 / 2.0) / np.sqrt(
                n - (b + 1.0) / 2.0
            )  # apply squareroot

        return r

    x = np.zeros(n)
    y = np.zeros(n)

    b = np.round(alpha * np.sqrt(n))  # number of boundary points

    phi = (np.sqrt(5.0) + 1.0) / 2.0  # golden ratio

    for k in np.arange(0, n):

        r = radius(k, n, b)

        theta = 2.0 * np.pi * (k + 1) / phi**2

        x[k] = r * np.cos(theta)
        y[k] = r * np.sin(theta)

    return x, y


TI = 0.11
relaxationFactor = 1.0

# turbineX = np.array([-989.15375368,   894.74221693,  -903.54431613,  -651.87697118,
#       993.27201087,   358.13248155,  -862.21018041,  -717.73802889,
#       971.63296171,    47.94540108, -1060.88699677,  -366.83942243,
#     -1011.59641665,  -636.4499553 ,  -153.16472496,    61.02029503,
#      1166.50742982,  -258.99829016,   547.81824583,   940.06905288,
#      -451.70688075, -1111.26986472,  -584.10994123,   346.8207002 ,
#       766.01343827])
# turbineY = np.array([ -720.31061321,  -972.1420524 ,  -555.67440013,  -569.80353516,
#      -419.57700162,   855.92543884,   -24.82631949, -1137.04838654,
#       701.88441272,  -198.89888378,  -102.08982895,  -149.74348519,
#       743.69706922,   134.7762775 , -1009.58648916,  -482.19347721,
#      -664.96508094,   599.66869118,  -330.53352802,   851.5234445 ,
#      -651.18926568,  1161.07731098,   947.12434335,  -379.35985373,
#     -1038.67320466])
#
# sorted_x_idx = np.argsort(turbineX)
# print(sorted_x_idx

turbineX = np.array(
    [
        -338.253343681,
        968.628106756,
        -949.430495476,
        -1015.99362647,
        975.474054701,
        84.9434622485,
        -1110.74608216,
        -274.827029486,
        978.590542646,
        -726.891724024,
        -1173.0990966,
        -664.959054275,
        -977.293679105,
        -885.302790049,
        -49.1513960402,
        152.814384451,
        1173.37729087,
        -754.942347187,
        1097.188171,
        352.301400021,
        -112.577710215,
        -204.158584106,
        21.6010014939,
        1118.63478309,
        14.2749462634,
    ]
)
turbineY = np.array(
    [
        -798.251832178,
        -142.308949352,
        -163.776165876,
        -429.312935542,
        186.558660922,
        921.149429473,
        378.654238798,
        -1050.39683548,
        647.685449449,
        -298.22502307,
        -31.215399162,
        111.117853392,
        649.640636326,
        249.134657097,
        -921.282512224,
        -544.841149781,
        17.9339026121,
        514.882018071,
        416.309991482,
        799.863270353,
        -669.137508961,
        1044.34803637,
        1173.31551099,
        -354.671839363,
        -1173.42750841,
    ]
)


turbineX = np.random.rand(10) * 126.4 * 4 * 4.0
turbineY = np.random.rand(10) * 126.4 * 4 * 4.0

# turbineX = np.array([0.,200.,400.,600.,800.])
# turbineY = np.array([0.,0.,0.,0.,0.])
# turbineX = np.array([0.,1000.,2000.,1000.])
# turbineY = np.array([0.,0.,0.,500.])
nTurbines = len(turbineX)
turbineZ = np.ones(nTurbines) * 90.0
yaw = np.zeros(nTurbines)
rotorDiameter = np.ones(nTurbines) * 126.4
ky = 0.022
kz = 0.022
alpha = 2.32
beta = 0.154
z_ref = 50.0
z_0 = 0.0
# RotorPointsY = np.array([0.])
# RotorPointsZ = np.array([0.])
nRotorPoints = 20
RotorPointsY, RotorPointsZ = sunflower_points(nRotorPoints)

use_ct_curve = False
interp_type = 1
Ct = np.ones(nTurbines) * 8.0 / 9.0

ct_curve_ct = np.array(
    [
        0.000000000000000001e00,
        1.926046656751827513e-01,
        2.304704215057909733e-01,
        2.625801650211371241e-01,
        2.897988824025847787e-01,
        3.128715534101859097e-01,
        3.325197358991970331e-01,
        3.493848361140217129e-01,
        3.640088009445398010e-01,
        3.768126783817991599e-01,
        3.876023690081823458e-01,
        3.972631433719887584e-01,
        4.056700381028983671e-01,
        4.130674880647284830e-01,
        4.196235247518781408e-01,
        4.254417392565709721e-01,
        4.305404786433919551e-01,
        4.352952842627632046e-01,
        4.392221404869978141e-01,
        4.429120876801027618e-01,
        4.462733349122694482e-01,
        4.489563239069855882e-01,
        4.514849682878421255e-01,
        4.538698830206908674e-01,
        4.556616377445937838e-01,
        4.571609267936883603e-01,
        4.585773528364238683e-01,
        4.599161818549730718e-01,
        4.609826078311411446e-01,
        4.615522686688521281e-01,
        4.620913641318648013e-01,
        4.626017054828027719e-01,
        4.630849686797392506e-01,
        4.635427067073090157e-01,
        4.637089016217447179e-01,
        4.635678487000876591e-01,
        4.634341695706203357e-01,
        4.633074665079051635e-01,
        4.631873685982802469e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567137690e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567137690e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567137690e-01,
        4.631607703567138801e-01,
        4.631607703567137690e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.631607703567138801e-01,
        4.629944322154941894e-01,
        4.628064174063633018e-01,
        4.619912099228598024e-01,
        4.609688430800724657e-01,
        4.599702722417739476e-01,
        4.589946761727181079e-01,
        4.580412709972682683e-01,
        4.602779942453900097e-01,
        4.601593442651156773e-01,
        4.522311128900888266e-01,
        4.444394795294665523e-01,
        4.367820906927074032e-01,
        4.292566334383077220e-01,
        4.218608346751668847e-01,
        4.145924604759902432e-01,
        4.074493154025272679e-01,
        4.004292418424294508e-01,
        3.935301193575363454e-01,
        3.867498640433883472e-01,
        3.800864278997781454e-01,
        3.735377982121443341e-01,
        3.671019969436217778e-01,
        3.607770801375717595e-01,
        3.545611373304012326e-01,
        3.484522909744995345e-01,
        3.424486958711209228e-01,
        3.365485386130337986e-01,
        3.307500370367759124e-01,
        3.250514396843435794e-01,
        3.194510252741598055e-01,
        3.139471021811547913e-01,
        3.085380079258019381e-01,
        3.032221086719636416e-01,
        2.979977987333838341e-01,
        2.928635000886827267e-01,
        2.878176619047133067e-01,
        2.828587600681249370e-01,
        2.779852967249981099e-01,
        2.731957998284155198e-01,
        2.684888226938225708e-01,
        2.638629435620525876e-01,
        2.593167651698772835e-01,
        2.548489143279616398e-01,
        2.504580415060849163e-01,
        2.461428204255101670e-01,
        2.419019476583784412e-01,
        2.377341422340028820e-01,
        2.336381452519474267e-01,
        2.296127195017700351e-01,
        2.256566490893210097e-01,
        2.217687390694769445e-01,
        2.179478150852021401e-01,
        2.141927230128318482e-01,
        2.105023286134643790e-01,
        2.068755171903588486e-01,
        2.033111932522393972e-01,
        1.998082801823969634e-01,
        1.963657199134924980e-01,
        1.929824726079658326e-01,
        1.896575163439477851e-01,
        1.863898468065857128e-01,
        1.831784769846854788e-01,
        1.800224368725827362e-01,
        1.769207731771487158e-01,
        1.738725490298434206e-01,
        1.708768437037334609e-01,
        1.679327523353813245e-01,
        1.650393856515293134e-01,
        1.621958697004900751e-01,
        1.594013455881682639e-01,
        1.566549692186263998e-01,
        1.539559110391245933e-01,
        1.513033557895500647e-01,
        1.486965022561654304e-01,
        1.461345630295985409e-01,
        1.436167642670038713e-01,
        1.411423454583196901e-01,
        1.387105591965529239e-01,
        1.363206709520234095e-01,
        1.339719588504956205e-01,
        1.316637134551348065e-01,
        1.293952375522178233e-01,
        1.271658459405384245e-01,
        1.249748652244396241e-01,
        1.228216336104114015e-01,
        1.207055007071945740e-01,
        1.186258273293273463e-01,
        1.165819853040765686e-01,
        1.145733572816970275e-01,
        1.125993365489582620e-01,
        1.106593268458838930e-01,
        1.087527421856505916e-01,
        1.068790066775877345e-01,
        1.050375543532279521e-01,
        1.032278289953537237e-01,
        1.014492839699910887e-01,
        9.970138206129613989e-02,
        9.798359530928681116e-02,
        9.629540485037166309e-02,
        9.463630076062452823e-02,
        9.300578190176048143e-02,
        9.140335576976474363e-02,
        8.982853834613112320e-02,
        8.828085395166129778e-02,
        8.675983510278516275e-02,
        8.526502237035533949e-02,
        8.379596424087515372e-02,
        8.235221698011675751e-02,
        8.093334449909067585e-02,
        7.953891822232299347e-02,
        7.816851695840211500e-02,
        7.682172677275747597e-02,
        7.549814086262850166e-02,
        7.419735943418842572e-02,
        7.291898958178492929e-02,
        7.166264516926239281e-02,
        7.042794671332706924e-02,
        6.921452126892356504e-02,
        6.802200231658521445e-02,
        6.685002965172548439e-02,
        6.569824927583710339e-02,
        6.456631328956505267e-02,
        6.345387978762324910e-02,
        6.236061275551976757e-02,
        6.128618196806329826e-02,
        6.023026288961717128e-02,
        5.919253657607215918e-02,
        5.817268957850805361e-02,
        5.717041384851592745e-02,
        5.618540664515054434e-02,
        5.521737044348627721e-02,
        5.426601284474912718e-02,
        5.333104648799626146e-02,
        5.241218896331780591e-02,
        5.150916272653360134e-02,
        5.062169501536060989e-02,
        4.974951776702336154e-02,
        4.889236753728529172e-02,
        4.804998542087406121e-02,
        4.722211697327857727e-02,
        4.640851213389269453e-02,
        4.640294355792866365e-02,
    ]
)

ct_curve_wind_speed = np.array(
    [
        2.990000000000000213e00,
        3.000000000000000000e00,
        3.130846633912168553e00,
        3.261693267824336662e00,
        3.392539901736505215e00,
        3.523386535648673323e00,
        3.654233169560841876e00,
        3.785079803473010429e00,
        3.915926437385178538e00,
        4.046773071297346647e00,
        4.177619705209515644e00,
        4.308466339121683752e00,
        4.439312973033851861e00,
        4.570159606946020858e00,
        4.701006240858188967e00,
        4.831852874770357076e00,
        4.962699508682526073e00,
        5.093546142594694182e00,
        5.224392776506862290e00,
        5.355239410419031287e00,
        5.486086044331199396e00,
        5.616932678243367505e00,
        5.747779312155536502e00,
        5.878625946067704611e00,
        6.009472579979872719e00,
        6.140319213892041716e00,
        6.271165847804209825e00,
        6.402012481716377934e00,
        6.532859115628546931e00,
        6.663705749540715040e00,
        6.794552383452883149e00,
        6.925399017365052146e00,
        7.056245651277220254e00,
        7.187092285189388363e00,
        7.317938919101556472e00,
        7.448785553013725469e00,
        7.579632186925893578e00,
        7.710478820838061687e00,
        7.841325454750230683e00,
        7.972172088662398792e00,
        8.103018722574567789e00,
        8.233865356486735010e00,
        8.364711990398904007e00,
        8.495558624311073004e00,
        8.626405258223240224e00,
        8.757251892135409221e00,
        8.888098526047578218e00,
        9.018945159959745439e00,
        9.149791793871914436e00,
        9.280638427784083433e00,
        9.411485061696250654e00,
        9.542331695608419651e00,
        9.673178329520588647e00,
        9.804024963432755868e00,
        9.934871597344924865e00,
        1.006571823125709386e01,
        1.019656486516926108e01,
        1.032741149908143008e01,
        1.045825813299359908e01,
        1.058910476690576630e01,
        1.071995140081793352e01,
        1.085079803473010429e01,
        1.098164466864227151e01,
        1.111249130255444051e01,
        1.124333793646660773e01,
        1.137418457037877673e01,
        1.150503120429094572e01,
        1.163587783820311294e01,
        1.163687783820311239e01,
        1.170448773987094526e01,
        1.177249045298416696e01,
        1.184088825976518677e01,
        1.190968345569603315e01,
        1.197887834959541564e01,
        1.204847526369622734e01,
        1.211847653372344524e01,
        1.218888450897254216e01,
        1.225970155238831971e01,
        1.233093004064423148e01,
        1.240257236422211662e01,
        1.247463092749243785e01,
        1.254710814879499381e01,
        1.262000646052004527e01,
        1.269332830918996713e01,
        1.276707615554136943e01,
        1.284125247460764818e01,
        1.291585975580207624e01,
        1.299090050300133115e01,
        1.306637723462955591e01,
        1.314229248374284609e01,
        1.321864879811426619e01,
        1.329544874031939194e01,
        1.337269488782226112e01,
        1.345038983306189451e01,
        1.352853618353932852e01,
        1.360713656190508125e01,
        1.368619360604718338e01,
        1.376570996917974021e01,
        1.384568831993192539e01,
        1.392613134243757322e01,
        1.400704173642524530e01,
        1.408842221730886735e01,
        1.417027551627881010e01,
        1.425260438039358135e01,
        1.433541157267203126e01,
        1.441869987218604443e01,
        1.450247207415383777e01,
        1.458673099003374496e01,
        1.467147944761861744e01,
        1.475672029113066763e01,
        1.484245638131695166e01,
        1.492869059554540279e01,
        1.501542582790134972e01,
        1.510266498928466561e01,
        1.519041100750748896e01,
        1.527866682739243132e01,
        1.536743541087143328e01,
        1.545671973708519076e01,
        1.554652280248309282e01,
        1.563684762092381852e01,
        1.572769722377645785e01,
        1.581907466002229157e01,
        1.591098299635705970e01,
        1.600342531729391382e01,
        1.609640472526695731e01,
        1.618992434073530617e01,
        1.628398730228786917e01,
        1.637859676674863962e01,
        1.647375590928269418e01,
        1.656946792350268183e01,
        1.666573602157608036e01,
        1.676256343433293594e01,
        1.685995341137432391e01,
        1.695790922118139576e01,
        1.705643415122510120e01,
        1.715553150807646787e01,
        1.725520461751760237e01,
        1.735545682465332717e01,
        1.745629149402339664e01,
        1.755771200971544843e01,
        1.765972177547854471e01,
        1.776232421483745938e01,
        1.786552277120751953e01,
        1.796932090801018234e01,
        1.807372210878929764e01,
        1.817872987732797796e01,
        1.828434773776621114e01,
        1.839057923471915146e01,
        1.849742793339603253e01,
        1.860489741971984046e01,
        1.871299130044769754e01,
        1.882171320329183928e01,
        1.893106677704140850e01,
        1.904105569168489609e01,
        1.915168363853333844e01,
        1.926295433034414017e01,
        1.937487150144572112e01,
        1.948743890786286315e01,
        1.960066032744270004e01,
        1.971453955998155294e01,
        1.982908042735243725e01,
        1.994428677363336178e01,
        2.006016246523626378e01,
        2.017671139103686073e01,
        2.029393746250508812e01,
        2.041184461383640780e01,
        2.053043680208382682e01,
        2.064971800729074403e01,
        2.076969223262445041e01,
        2.089036350451051405e01,
        2.101173587276795374e01,
        2.113381341074506992e01,
        2.125660021545620282e01,
        2.138010040771921538e01,
        2.150431813229382527e01,
        2.162925755802062611e01,
        2.175492287796109636e01,
        2.188131830953824419e01,
        2.200844809467817598e01,
        2.213631649995246775e01,
        2.226492781672132537e01,
        2.239428636127766836e01,
        2.252439647499188879e01,
        2.265526252445766175e01,
        2.278688890163840242e01,
        2.291928002401470010e01,
        2.305244033473256593e01,
        2.318637430275259348e01,
        2.332108642299984780e01,
        2.345658121651478467e01,
        2.359286323060499768e01,
        2.372993703899775753e01,
        2.386780724199356385e01,
        2.400647846662051066e01,
        2.414595536678961807e01,
        2.428624262345093143e01,
        2.442734494475072893e01,
        2.456926706618942902e01,
        2.471201375078058504e01,
        2.485558978921068274e01,
        2.500000000000000711e01,
        2.500100000000000122e01,
    ]
)


wake_model_version = 2016
sm_smoothing = 700.0
calc_k_star = True
ti_calculation_method = 2
wake_combination_method = 1
print_ti = False

shear_exp = 0.0

windDirections, windFrequencies, windSpeeds = northIslandRose(50)
wind_angle = windDirections[np.argmax(windFrequencies * windSpeeds**3)]
windDirections, windFrequencies, windSpeeds = northIslandRose(30, nSpeeds=5)
windDirections -= wind_angle

# windDirections = np.ones_like(windDirections)*270.
# windSpeeds = windSpeeds*0.3

rated_ws = 11.4
rated_power = 3.35
cut_in_speed = 3.0
cut_out_speed = 25.0

wake_model_version = 2016
sm_smoothing = 700.0
calc_k_star = True
ti_calculation_method = 2
wake_combination_method = 1
print_ti = False

ky = 0.022
kz = 0.022
alpha = 2.32
beta = 0.154
zref = 50.0
z0 = 0.0
# RotorPointsY = np.array([0.])
# RotorPointsZ = np.array([0.])
nRotorPoints = 4
RotorPointsY, RotorPointsZ = sunflower_points(nRotorPoints)
print("RotorPointsY: ", RotorPointsY)
print("RotorPointsZ: ", RotorPointsZ)

import time

s = time.time()
turbineXd = np.zeros((nTurbines, nTurbines))
turbineYd = np.zeros((nTurbines, nTurbines))
turbineXd = np.eye(nTurbines)
aep, daep_dx = full_aep.calcaep_dv(
    turbineX,
    turbineXd,
    turbineY,
    turbineYd,
    turbineZ,
    rotorDiameter,
    Ct,
    yaw,
    windDirections,
    windSpeeds,
    windFrequencies,
    shear_exp,
    rated_ws,
    rated_power,
    cut_in_speed,
    cut_out_speed,
    zref,
    z0,
    ky,
    kz,
    alpha,
    beta,
    TI,
    relaxationFactor,
    RotorPointsY,
    RotorPointsZ,
    ct_curve_wind_speed,
    ct_curve_ct,
    sm_smoothing,
    wake_combination_method,
    ti_calculation_method,
    wake_model_version,
    interp_type,
    calc_k_star,
    print_ti,
    use_ct_curve,
)


turbineXd = np.zeros((nTurbines, nTurbines))
turbineYd = np.zeros((nTurbines, nTurbines))
turbineYd = np.eye(nTurbines)
aep, daep_dy = full_aep.calcaep_dv(
    turbineX,
    turbineXd,
    turbineY,
    turbineYd,
    turbineZ,
    rotorDiameter,
    Ct,
    yaw,
    windDirections,
    windSpeeds,
    windFrequencies,
    shear_exp,
    rated_ws,
    rated_power,
    cut_in_speed,
    cut_out_speed,
    zref,
    z0,
    ky,
    kz,
    alpha,
    beta,
    TI,
    relaxationFactor,
    RotorPointsY,
    RotorPointsZ,
    ct_curve_wind_speed,
    ct_curve_ct,
    sm_smoothing,
    wake_combination_method,
    ti_calculation_method,
    wake_model_version,
    interp_type,
    calc_k_star,
    print_ti,
    use_ct_curve,
)
print(time.time() - s)


fdx = np.zeros(nTurbines)
fdy = np.zeros(nTurbines)

d = 0.0001
turbineXd = np.zeros((nTurbines, nTurbines))
turbineYd = np.zeros((nTurbines, nTurbines))

for i in range(nTurbines):
    D = np.zeros(nTurbines)
    D[i] = d
    aep_fd, _ = full_aep.calcaep_dv(
        turbineX + D,
        turbineXd,
        turbineY,
        turbineYd,
        turbineZ,
        rotorDiameter,
        Ct,
        yaw,
        windDirections,
        windSpeeds,
        windFrequencies,
        shear_exp,
        rated_ws,
        rated_power,
        cut_in_speed,
        cut_out_speed,
        zref,
        z0,
        ky,
        kz,
        alpha,
        beta,
        TI,
        relaxationFactor,
        RotorPointsY,
        RotorPointsZ,
        ct_curve_wind_speed,
        ct_curve_ct,
        sm_smoothing,
        wake_combination_method,
        ti_calculation_method,
        wake_model_version,
        interp_type,
        calc_k_star,
        print_ti,
        use_ct_curve,
    )
    fdx[i] = (aep_fd - aep) / d

    aep_fd, _ = full_aep.calcaep_dv(
        turbineX,
        turbineXd,
        turbineY + D,
        turbineYd,
        turbineZ,
        rotorDiameter,
        Ct,
        yaw,
        windDirections,
        windSpeeds,
        windFrequencies,
        shear_exp,
        rated_ws,
        rated_power,
        cut_in_speed,
        cut_out_speed,
        zref,
        z0,
        ky,
        kz,
        alpha,
        beta,
        TI,
        relaxationFactor,
        RotorPointsY,
        RotorPointsZ,
        ct_curve_wind_speed,
        ct_curve_ct,
        sm_smoothing,
        wake_combination_method,
        ti_calculation_method,
        wake_model_version,
        interp_type,
        calc_k_star,
        print_ti,
        use_ct_curve,
    )
    fdy[i] = (aep_fd - aep) / d


print("daep_dx: ", daep_dx)
print("fdx: ", fdx)

print("daep_dy: ", daep_dy)
print("fdy: ", fdy)

print(np.max(daep_dx - fdx))
print(np.max(daep_dy - fdy))

print(aep)
